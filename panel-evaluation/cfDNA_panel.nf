panels   = Channel.fromPath("${params.panel_dir}/*.bed")
cfDNA    = Channel.fromPath("${params.cfDNA_dir}/*.vcf").map{file -> [((file =~ /(P\d+)/)[0][1]): file] }


//println "${params.cfDNA_dir}/*.vcf"
//cfDNA.subscribe{ println it }

process score{
    tag { patient[patient.keySet()[0]].baseName + " => " + panel.baseName.replaceAll(/_locations_hg19/,'') }
    echo true
    executor 'local'
    afterScript "sort -k3,3 -k1,1nr ${params.home_dir}/cfDNA_panel.tsv > ${params.home_dir}/cfDNA_panel_sorted.tsv"

    input:
    file panel from panels
    each patient from cfDNA

    shell: 
    '''
    # Define some variables
    DIR="!{patient[patient.keySet()[0]].getParent()}"
    PATIENT="!{patient.keySet()[0]}"
    PANEL="!{panel.baseName}"
    
    # Remove the chr prefix from chromosomes generated by freebayes for cfDNA variants
    !{params.home_dir}/../remove_chr.awk !{patient[patient.keySet()[0]]} > cfDNA.vcf

    # Remove germline
    bedtools subtract -header -a cfDNA.vcf -b $DIR/../foci/$PATIENT-N*.vcf > somatic.vcf

    # Subset the panel
    head -n!{params.panel_size} !{params.panel_dir}/$PANEL.bed | sort-bed - > panel.bed

    # Intersect cfDNA mutations with the panel
    bedtools intersect -a somatic.vcf -b panel.bed > cfDNA_panel.vcf

    # Append output to the final results file
    echo -e `grep -v "#" cfDNA_panel.vcf | wc -l`'\t'`grep -v "#" somatic.vcf | wc -l`'\t'`grep -v "#" cfDNA.vcf | wc -l`'\t'$PATIENT'\t'$PANEL >> !{params.home_dir}/cfDNA_panel.tsv
    '''
}
